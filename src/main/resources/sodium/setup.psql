CREATE FUNCTION now_utc() RETURNS timestamp AS $$ SELECT now() AT TIME ZONE 'utc' $$ LANGUAGE SQL;
CREATE TYPE inventory_action AS ENUM ('TAKE', 'PUT');
CREATE TYPE block_action AS ENUM ('BREAK', 'PLACE', 'USE');
CREATE TYPE dimension AS ENUM ('minecraft:overworld', 'minecraft:the_nether', 'minecraft:the_end');
CREATE TYPE ipos AS (x int, y int, z int, d dimension);
CREATE TYPE dpos AS (x double precision, y double precision, z double precision, d dimension);
-- Indices
-- Name of the entity. Will be the identifier if not a player.
-- UUID of the player. If any other entity or block, Helium UUIDs will be set instead.
CREATE TABLE IF NOT EXISTS users_table (index SERIAL PRIMARY KEY, name TEXT NOT NULL, uid uuid NOT NULL UNIQUE);
CREATE TABLE IF NOT EXISTS entities_table (index SERIAL PRIMARY KEY, uid uuid NOT NULL UNIQUE);
-- name: Identifier of the block.
-- properties: Properties of the block. If not set, use default block state.
CREATE TABLE IF NOT EXISTS blocks_table (index SERIAL PRIMARY KEY, name TEXT NOT NULL, properties jsonb NULL);
CREATE INDEX IF NOT EXISTS user_index ON users_table (index);
CREATE INDEX IF NOT EXISTS entity_index ON entitis_table (index);
CREATE INDEX IF NOT EXISTS block_index ON blocks_table (index);
-- Extra functions that cannot be created elsewhere
CREATE FUNCTION get_else_insert_user(bname text, buid uuid) RETURNS int AS $$ WITH s AS (SELECT index FROM users_table WHERE uid = buid), i AS (INSERT INTO users_table (name, uid) SELECT bname, buid WHERE NOT EXISTS (SELECT 1 FROM s) RETURNING index), u AS (UPDATE users_table SET name = bname WHERE NOT EXISTS (SELECT 1 FROM i) AND uid = buid AND name != bname) SELECT index FROM i UNION ALL select index FROM s $$ LANGUAGE SQL;
CREATE FUNCTION get_else_insert_entity(buid uuid) RETURNS int AS $$ WITH s AS (SELECT index FROM entities_table WHERE uid = buid), i AS (INSERT INTO entities_table (uid) SELECT buid WHERE NOT EXISTS (SELECT 1 FROM s) RETURNING index) SELECT index FROM i UNION ALL select index FROM s $$ LANGUAGE SQL;
CREATE FUNCTION get_else_insert_block(bname text, bprops jsonb) RETURNS int AS $$ WITH s AS (SELECT index FROM blocks_table WHERE name = bname AND properties = bprops), i AS (INSERT INTO blocks_table (name, properties) SELECT bname, bprops WHERE NOT EXISTS (SELECT 1 FROM s) RETURNING index) SELECT index FROM i UNION ALL select index FROM s $$ LANGUAGE SQL;
-- Mutation Tables
CREATE TABLE IF NOT EXISTS mutation (cause_id int REFERENCES users_table (index) NOT NULL, cause_raw int REFERENCES entities_table (index), cause_pos ipos, time timestamp NOT NULL DEFAULT now_utc(), undone boolean NOT NULL DEFAULT false);
CREATE TABLE IF NOT EXISTS blocks (pos ipos NOT NULL, block int REFERENCES blocks_table (index), action block_action) INHERITS (mutation);
CREATE TABLE IF NOT EXISTS attacks (target_id int REFERENCES users_table (index) NOT NULL, target_raw int REFERENCES entities_table (index), death_pos dpos, data jsonb) INHERITS (mutation);
CREATE TABLE IF NOT EXISTS items (from_id int REFERENCES users_table (index), from_raw int REFERENCES entities_table (index), from_pos ipos, data jsonb, action inventory_action) INHERITS (mutation);

-- CREATE TABLE IF NOT EXISTS craft (recipe varchar[255]) INHERITS (mutation);

SELECT index FROM users_table WHERE uid = '8c090f34-190e-430a-9fc4-df248d1298c7';
SELECT uid FROM users_table WHERE index = 00;
INSERT INTO users_table (name, uid) VALUES ('Butt', '8c090f34-190e-430a-9fc4-df248d1298c7') ON CONFLICT ( uid) DO UPDATE SET name = EXCLUDED.name RETURNING index;

-- On block mutation
// get_else_insert_user(?, ?)
// get_else_insert_block(?, ?::jsonb)
INSERT INTO blocks (cause_id, cause_raw, pos, block, action) VALUES (?, ?, (?, ?, ?, ?)::ipos, ?, ?::block_action);


INSERT INTO blocks (cause_id, pos, block, action) VALUES (get_else_insert_user(?, ?), (?, ?, ?, ?)::ipos, get_else_insert_block(?, ?::jsonb), ?::block_action);
INSERT INTO blocks (cause_id, pos, block, action, cause_raw) VALUES (get_else_insert_user(?, ?), (?, ?, ?, ?)::ipos, get_else_insert_block(?, ?::jsonb), ?::block_action, get_else_insert_entity(?));

INSERT INTO attacks (cause_id, cause_raw, target_id, target_raw, damage) VALUES (?, ?, ?, ?, ?);

-- 'minecraft:fire'
-- '{"facing":"east"}'

DROP OWNED BY ampflower CASCADE;