CREATE FUNCTION now_utc() RETURNS timestamp AS $$ SELECT now() AT TIME ZONE 'utc' $$ LANGUAGE SQL;

-- Allows for one to determine the version of the database, typically for migration purposes.
CREATE TABLE IF NOT EXISTS plymouth_metadata(
    schema INT NOT NULL;
)
INSERT INTO plymouth_metadata (schema) VALUES (1);

-- Types for ease of storage.
CREATE TYPE inventory_action AS ENUM ('TAKE', 'PUT');
CREATE TYPE block_action AS ENUM ('BREAK', 'PLACE', 'USE');
CREATE TYPE ipos AS (x int, y int, z int, d int);
CREATE TYPE dpos AS (x double precision, y double precision, z double precision, d int);

-- Block, User and Item Indices
-- Note: Plymouth UUIDs will be used under uid. *This is intended.*
-- Name of the entity, world, block. Will be the identifier if not a player.
-- UUID of the player. If any other entity or block, Plymouth UUIDs will be set instead.
CREATE TABLE IF NOT EXISTS users_table(
    index uuid NOT NULL PRIMARY KEY
    name  TEXT NOT NULL,
);
CREATE TABLE IF NOT EXISTS worlds_table(
    index     SERIAL PRIMARY KEY,
    name      TEXT NOT NULL,
    dimension TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS blocks_table(
    index      SERIAL PRIMARY KEY,
    name       TEXT  NOT NULL,
    properties jsonb NULL
);

-- Indexes for fast lookup.
CREATE INDEX IF NOT EXISTS users_index ON users_table (name);
CREATE INDEX IF NOT EXISTS blocks_index ON blocks_table (name);

-- Index functions.
CREATE FUNCTION get_else_insert_user(bname text, buid uuid) RETURNS uuid AS $$ INSERT INTO users_table(index, name) VALUES(bname, buid) ON CONFLICT(index) DO UPDATE SET name = bname RETURNING index $$ LANGUAGE SQL;

CREATE FUNCTION get_else_insert_world(bname text, bdim text) RETURNS int AS $$
WITH s AS (SELECT index FROM worlds_table WHERE name = bname AND dimension = bdim),
     i AS (INSERT INTO worlds_table (name, dimension) SELECT bname, bdim WHERE NOT EXISTS(SELECT 1 FROM s) RETURNING index)
SELECT index FROM i UNION ALL select index FROM s $$ LANGUAGE SQL;

CREATE FUNCTION get_else_insert_block(bname text, bprops jsonb) RETURNS int AS $$
WITH s AS (SELECT index FROM blocks_table WHERE name = bname AND (properties = bprops OR properties IS NULL)),
     i AS (INSERT INTO blocks_table (name, properties) SELECT bname, bprops WHERE NOT EXISTS(SELECT 1 FROM s) RETURNING index)
SELECT index FROM i UNION ALL select index FROM s $$ LANGUAGE SQL;

-- Mutation Tables
CREATE TABLE IF NOT EXISTS mutation(
    cause_id  uuid REFERENCES users_table (index) NOT NULL,
    cause_raw uuid,
    cause_pos ipos,
    time      timestamp NOT NULL DEFAULT now_utc(),
    undone    boolean NOT NULL DEFAULT false
);
CREATE TABLE IF NOT EXISTS blocks(
    pos    ipos NOT NULL,
    block  int REFERENCES blocks_table (index),
    action block_action,
    nbt    bytea
) INHERITS (mutation);
CREATE TABLE IF NOT EXISTS deaths(
    target_id  uuid REFERENCES users_table (index) NOT NULL,
    target_raw uuid,
    target_pos dpos NOT NULL
) INHERITS (mutation);
CREATE TABLE IF NOT EXISTS items(
    target_id  uuid REFERENCES users_table (index),
    target_raw uuid,
    target_pos ipos,
    data       jsonb,
    action     inventory_action
) INHERITS (mutation);

-- Upgrade script
BEGIN;

CREATE TABLE plymouth_metadata(schema INT NOT NULL);
INSERT INTO plymouth_metadata(schema) VALUES(1);

ALTER TABLE mutation ADD cause_uid uuid REFERENCES users_table (uid);
UPDATE mutation SET cause_uid = (SELECT uid FROM users_table WHERE index = cause_id);
ALTER TABLE mutation DROP cause_id;
ALTER TABLE mutation RENAME cause_uid TO cause_id;
ALTER TABLE mutation ALTER COLUMN cause_id SET NOT NULL;

-- We're using cause_uid for the sake of migrating data over.
ALTER TABLE mutation ADD cause_uid uuid;
-- It's kinda funny, having a common table actually saved some code.
UPDATE mutation SET cause_uid = (SELECT uid FROM entities_table WHERE index = cause_raw);
ALTER TABLE mutation DROP cause_raw;
ALTER TABLE mutation RENAME cause_uid TO cause_raw;

ALTER TABLE deaths ADD target_uid uuid REFERENCES users_table (uid);
UPDATE deaths SET target_uid = (SELECT uid FROM users_table WHERE index = target_id);
ALTER TABLE deaths DROP target_id;
ALTER TABLE deaths RENAME target_uid TO target_id;
ALTER TABLE deaths ALTER COLUMN target_id SET NOT NULL;

ALTER TABLE deaths ADD target_uid uuid;
UPDATE deaths SET target_uid = (SELECT uid FROM entities_table WHERE index = target_raw);
ALTER TABLE deaths DROP target_raw;
ALTER TABLE deaths RENAME target_uid TO target_raw;

ALTER TABLE deaths RENAME death_pos TO target_pos;

ALTER TABLE items ADD target_id uuid;
UPDATE items SET target_id = (SELECT uid FROM entities_table WHERE index = inventory_id);
ALTER TABLE items DROP inventory_id;

ALTER TABLE items ADD target_raw uuid;
UPDATE items SET target_raw = (SELECT uid FROM entities_table WHERE index = inventory_raw);
ALTER TABLE items DROP inventory_raw;

DROP FUNCTION get_else_insert_entity;
DROP TABLE entities_table;

-- Required for upgrading purposes.
DROP FUNCTION get_else_insert_user;

ALTER TABLE users_table DROP index;
ALTER TABLE users_table RENAME uid TO index;
ALTER TABLE users_table ADD PRIMARY KEY (index);

CREATE FUNCTION get_else_insert_user(bname text, buid uuid) RETURNS uuid AS $$ INSERT INTO users_table(index, name) VALUES(buid, bname) ON CONFLICT(index) DO UPDATE SET name = bname RETURNING index $$ LANGUAGE SQL;

ALTER TABLE blocks ADD nbt bytea;

ROLLBACK;